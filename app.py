import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import math
import google.generativeai as genai
from deep_translator import GoogleTranslator
import os

st.set_page_config(page_title="An√°lisis Financiero Avanzado", page_icon="üìà", layout="wide")
st.markdown("""
    <style>
    .main { padding: 2rem; }
    .stApp { background-color: #f4f6f8; }
    .reportview-container { background: #f4f6f8; }
    .sidebar .st-header { padding-bottom: 1rem; border-bottom: 1px solid #ccc; }
    .st-metric-label { font-size: 1rem; font-weight: bold; color: #336699; }
    .st-metric-value { font-size: 1.5rem; color: #2e4053; }
    .st-metric-delta { font-size: 1rem; color: green; }
    .st-metric-delta.negative { color: red; }
    .section-header { font-size: 1.6rem; font-weight: bold; color: #1c395e; margin-top: 1.5rem; }
    .ai-analysis { background-color: #e9ecef; padding: 1rem; border-radius: 5px; margin-top: 1rem; }
    .macro-data-guidance { background-color: #f0f8ea; padding: 1rem; border-radius: 5px; margin-top: 1rem; color: #2e7d32; }
    .full-description { margin-top: 1rem; padding: 1rem; border: 1px solid #ccc; border-radius: 5px; background-color: #fff; }
    .popular-action-button { margin-right: 0.5rem; }
    .performance-formula { background-color: #f9f9f9; padding: 0.75rem; border: 1px solid #ddd; border-radius: 3px; margin-top: 1rem; font-size: 0.9rem; }
    </style>
""", unsafe_allow_html=True)

# --- FUNCIONES UTILITARIAS ---
def calculate_cagr(initial_value, final_value, years):
    """Calcula la Tasa de Crecimiento Anual Compuesto."""
    if initial_value <= 0 or years <= 0:
        return 0
    return (final_value / initial_value) ** (1/years) - 1

def calculate_annualized_volatility(returns):
    """Calcula la volatilidad anualizada a partir de los rendimientos diarios."""
    daily_std = np.std(returns)
    return daily_std * np.sqrt(252)

def format_percentage(value):
    """Formatea un n√∫mero como una cadena de porcentaje."""
    return f"{value * 100:.2f}%"

def get_ai_summary(text, max_length=150):
    """Genera un resumen conciso del texto utilizando la IA de Gemini."""
    if not api_key or api_key == "TU_API_KEY_AQUI":
        return "La funcionalidad de resumen AI no est√° disponible. Por favor, configura la API key de Gemini."

    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-pro')

        prompt = f"""
            Por favor, proporciona un resumen conciso en espa√±ol del siguiente texto,
            limit√°ndolo a un m√°ximo de {max_length} palabras:

            {text}
        """
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"Error al generar el resumen AI: {e}")
        return "No se pudo generar un resumen."

def get_ai_recommendation(company_name, sector, current_price, volatility_str, cagr_1yr, cagr_3yr, cagr_5yr):
    """Genera una recomendaci√≥n breve basada en IA."""
    if not api_key or api_key == "TU_API_KEY_AQUI":
        return "La funcionalidad de an√°lisis AI no est√° disponible. Por favor, configura la API key de Gemini."

    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-pro')

        prompt = f"""
            Genera una recomendaci√≥n concisa para un inversor sobre la acci√≥n de {company_name},
            que opera en el sector de {sector}. El precio actual es de ${{current_price}},
            la volatilidad anualizada es de {volatility_str}, y las tasas de crecimiento anual compuesto
            (CAGR) son: 1 a√±o = {cagr_1yr}, 3 a√±os = {cagr_3yr}, 5 a√±os = {cagr_5yr}.
            Considera estos factores para dar una perspectiva general (alcista, neutral o bajista)
            y un breve razonamiento de no m√°s de dos frases. El idioma de la respuesta debe ser espa√±ol.
        """
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"Error al generar la recomendaci√≥n AI: {e}")
        return None
def get_macroeconomic_guidance(sector, industry):
    """Proporciona una gu√≠a sobre d√≥nde buscar datos macroecon√≥micos."""
    guidance = f"""
        Para un an√°lisis m√°s profundo de {industry} dentro del sector de {sector},
        considera explorar las siguientes fuentes de datos macroecon√≥micos:
        \n\n
        - **Informes Gubernamentales:** Busca informes de instituciones gubernamentales relevantes en M√©xico
          (ej., INEGI, Banco de M√©xico) y a nivel internacional (ej., FMI, Banco Mundial) sobre el sector y la econom√≠a en general.
        - **Indicadores Econ√≥micos:** Presta atenci√≥n a indicadores como el PIB, la inflaci√≥n, las tasas de inter√©s,
          el desempleo y la confianza del consumidor. Estos pueden influir significativamente en el rendimiento de las acciones.
        - **Noticias Financieras y An√°lisis de Mercado:** Sigue fuentes de noticias financieras confiables (ej., El Financiero, Expansi√≥n, Reuters, Bloomberg)
          y los an√°lisis de mercado de bancos de inversi√≥n y firmas de an√°lisis.
        - **Datos del Sector Espec√≠fico:** Investiga informes y datos de asociaciones industriales y empresas de investigaci√≥n de mercado
          que se especialicen en el sector de {sector} y la industria de {industry}.
        - **Calendario Econ√≥mico:** Mantente al tanto de los pr√≥ximos eventos econ√≥micos y publicaciones de datos que podr√≠an afectar al mercado.
        \n
        Analizar c√≥mo estos factores macroecon√≥micos podr√≠an impactar las perspectivas de crecimiento y la rentabilidad de {industry}
        puede proporcionar una visi√≥n m√°s completa de la inversi√≥n en esta acci√≥n.
    """
    return guidance
def main():
    # T√≠tulo principal
    st.title("üìà An√°lisis Financiero Avanzado de Acciones")
    st.markdown("---")
    # Sidebar para la configuraci√≥n
    with st.sidebar:
        st.header("‚öôÔ∏è Configuraci√≥n del An√°lisis")
        ticker = st.text_input("S√≠mbolo de la Acci√≥n (ej: AAPL)", "").upper()
        translate_desc = st.checkbox("Traducir descripci√≥n al ingl√©s", value=False)
        st.markdown("---")
        st.markdown("""
            ### Instrucciones:
            1. Ingrese el s√≠mbolo de la acci√≥n.
            2. Opcional: Active la traducci√≥n de la descripci√≥n.
            """)
    # Contenido principal si se ingresa un ticker
    if ticker:
        try:
            # Obtener datos de la acci√≥n
            stock = yf.Ticker(ticker)
            info = stock.info
            if not info.get('longName'):
                st.error("‚ùå S√≠mbolo de acci√≥n no v√°lido o datos no disponibles.")
                return
            # --- SECCI√ìN DE INFORMACI√ìN DE LA EMPRESA ---
            st.header(f"üè¢ Informaci√≥n de la Empresa: {info.get('longName', ticker)}")
            col_info1, col_info2 = st.columns(2)
            with col_info1:
                st.subheader("Detalles Generales")
                st.write(f"**Sector:** {info.get('sector', 'N/A')}")
                st.write(f"**Industria:** {info.get('industry', 'N/A')}")
                st.write(f"**S√≠mbolo Burs√°til:** {ticker}")
                st.write(f"**Bolsa:** {info.get('exchange', 'N/A')}")
            with col_info2:
                st.subheader("Precio Actual")
                st.metric(
                    label="Precio",
                    value=f"${info.get('currentPrice', 0):.2f}",
                    delta=f"{info.get('regularMarketChangePercent', 0):.2f}%"
                )
            # Descripci√≥n de la empresa
            st.subheader("üìù Descripci√≥n de la Empresa")
            description = info.get('longBusinessSummary', 'No disponible')
            summary = get_ai_summary(description)
            st.write(f"**Resumen:** {summary}")
            show_full_description = st.checkbox("Ver descripci√≥n completa")
            if show_full_description:
                st.markdown(f"<div class='full-description'><h4>Descripci√≥n Completa:</h4> {description}</div>", unsafe_allow_html=True)
            if translate_desc:
                try:
                    translated = GoogleTranslator(source='auto', target='en').translate(description)
                    st.subheader("üìù Descripci√≥n (Ingl√©s)")
                    st.write(translated)
                except Exception as e:
                    st.warning("No se pudo traducir la descripci√≥n.")
            # --- SECCI√ìN DE AN√ÅLISIS HIST√ìRICO DEL PRECIO ---
            st.header("üìà An√°lisis Hist√≥rico del Precio")
            hist = stock.history(period="10y") # Extendemos el historial para tener m√°s opciones
            if len(hist) < 252:
                st.error("‚ùå No hay suficientes datos hist√≥ricos para el an√°lisis.")
                return
            # Obtener datos de los √≠ndices
            indices = ["SPY", "DJI", "QQQ"]
            index_data = yf.download(indices, start=hist.index.min(), end=hist.index.max())['Close']
            index_data_normalized = index_data / index_data.iloc[0]
            stock_data_normalized = hist['Close'] / hist['Close'].iloc[0]
            # Crear la gr√°fica comparativa
            fig_comparison = go.Figure()
            fig_comparison.add_trace(go.Scatter(x=hist.index, y=stock_data_normalized, mode='lines', name=info.get("longName", ticker)))
            for index in indices:
                fig_comparison.add_trace(go.Scatter(x=index_data_normalized.index, y=index_data_normalized[index], mode='lines', name=index))
            fig_comparison.update_layout(
                title=f'Comparativa del Precio Normalizado de {info.get("longName", ticker)} vs. √çndices',
                xaxis_title="Fecha",
                yaxis_title="Precio Normalizado (Base 1)",
                template='plotly_white'
            )
            st.plotly_chart(fig_comparison, use_container_width=True)
            # --- SECCI√ìN DE M√âTRICAS DE RENDIMIENTO Y RIESGO ---
            st.header("üìä M√©tricas de Rendimiento y Riesgo (√öltimos 5 A√±os)")
            hist['Returns'] = hist['Close'].pct_change().dropna()
            col_metrics1, col_metrics2 = st.columns(2)
            with col_metrics1:
                st.subheader("Rendimiento Anualizado (CAGR)")
                current_price = hist['Close'].iloc[-1]
                for years in [1, 3, 5]:
                    if len(hist) >= years * 252:
                        initial_price = hist['Close'].iloc[-(years * 252)]
                        cagr_value = calculate_cagr(initial_price, current_price, years)
                        st.metric(label=f"CAGR {years} A√±o(s)", value=format_percentage(cagr_value))
                    else:
                        st.metric(label=f"CAGR {years} A√±o(s)", value="N/A")
            with col_metrics2:
                st.subheader("Riesgo")
                volatility = calculate_annualized_volatility(hist['Returns'])
                st.metric(label="Volatilidad Anualizada", value=format_percentage(volatility))
                st.info("""
                    La volatilidad anualizada mide la dispersi√≥n de los rendimientos de la acci√≥n a lo largo de un a√±o.
                    Un valor m√°s alto indica un mayor riesgo.
                """)
            # --- SECCI√ìN DE RENDIMIENTO HIST√ìRICO (SELECCI√ìN DE PERIODO) ---
            st.subheader("üóìÔ∏è Rendimiento Hist√≥rico (Selecci√≥n de Periodo)")
            performance_years = st.selectbox("Seleccionar periodo para calcular el rendimiento:", [3, 5, 10])
            if performance_years:
                num_years = int(performance_years)
                if len(hist) >= num_years * 252:
                    initial_price_perf = hist['Close'].iloc[-(num_years * 252)]
                    final_price_perf = hist['Close'].iloc[-1]
                    total_return = (final_price_perf / initial_price_perf) - 1
                    st.metric(label=f"Rendimiento Total (√öltimos {num_years} A√±os)", value=format_percentage(total_return))
                else:
                    st.warning(f"No hay suficientes datos para calcular el rendimiento de los √∫ltimos {num_years} a√±os.")
            st.markdown("""
                <div class='performance-formula'>
                    **F√≥rmula para el Rendimiento Total:**
                    $$\\text{Rendimiento Total} = \\frac{\\text{Precio Final} - \\text{Precio Inicial}}{\\text{Precio Inicial}}$$
                </div>
            """, unsafe_allow_html=True)
            # --- SECCI√ìN DE RECOMENDACI√ìN BASADA EN IA ---
            st.header("ü§ñ Recomendaci√≥n Basada en IA")
            if api_key and api_key != "TU_API_KEY_AQUI":
                with st.spinner("Generando recomendaci√≥n AI..."):
                    cagr_1yr_str = format_percentage(calculate_cagr(hist['Close'].iloc[-252], current_price, 1)) if len(hist) >= 252 else "N/A"
                    cagr_3yr_str = format_percentage(calculate_cagr(hist['Close'].iloc[-252*3], current_price, 3)) if len(hist) >= 252*3 else "N/A"
                    cagr_5yr_str = format_percentage(calculate_cagr(hist['Close'].iloc[-252*5], current_price, 5)) if len(hist) >= 252*5 else "N/A"
                    ai_recommendation = get_ai_recommendation(
                        info.get('longName', ticker),
                        info.get('sector', 'N/A'),
                        info.get('currentPrice', 0),
                        format_percentage(volatility),
                        cagr_1yr_str,
                        cagr_3yr_str,
                        cagr_5yr_str
                    )
                    if ai_recommendation:
                        st.markdown(f"<div class='ai-analysis'><h4>An√°lisis AI:</h4> {ai_recommendation}</div>", unsafe_allow_html=True)
                    else:
                        st.warning("No se pudo generar una recomendaci√≥n AI en este momento.")
            else:
                    st.warning("La API key de Google Gemini no est√° configurada. La recomendaci√≥n AI no est√° disponible.")
            # --- GU√çA DE DATOS MACROECON√ìMICOS ---
            st.header("üåç Gu√≠a para Datos Macroecon√≥micos")
            macro_guidance = get_macroeconomic_guidance(info.get('sector', 'N/A'), info.get('industry', 'N/A'))
            st.markdown(f"<div class='macro-data-guidance'><h4>B√∫squeda de Datos Macroecon√≥micos:</h4> {macro_guidance}</div>", unsafe_allow_html=True)
        except yf.YFinanceError as e:
            st.error(f"‚ùå Error al obtener datos de Yahoo Finance: {e}")
        except Exception as e:
            st.error(f"‚ùå Ocurri√≥ un error inesperado: {e}")
    else:
        st.info("üëà Por favor, ingrese un s√≠mbolo de acci√≥n en el panel lateral para comenzar el an√°lisis avanzado.")
    # --- SECCI√ìN DE ACCIONES POPULARES ---
    st.subheader("üî• Acciones Populares")
    popular_actions = ["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "NVDA", "BRK.A", "JPM", "V", "JNJ"]
    cols = st.columns(len(popular_actions))
    for i, action in enumerate(popular_actions):
        with cols[i]:
            if st.button(action, key=f"popular_{action}", help=f"Analizar {action}"):
                st.rerun()
                st.session_state.ticker = action
                st.query_params["ticker"] = action
    if "ticker" in st.session_state and st.session_state.ticker:
        main() # Volver a ejecutar la funci√≥n principal con el ticker seleccionado
    # --- SECCI√ìN DE CONFIGURACI√ìN DE API KEY ---       
