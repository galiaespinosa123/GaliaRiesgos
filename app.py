import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import plotly.graph_objs as go
import google.generativeai as genai
from deep_translator import GoogleTranslator

# ----------------- CONFIGURACI칍N GEMINI -----------------
api_key = "AIzaSyCPyb9KQcsRe87k_T9WJmLTHtIt340pHHw"  # Considera usar st.secrets para manejar API keys de forma segura
genai.configure(api_key=api_key)
modelo = genai.GenerativeModel("gemini-1.5-flash")

# ----------------- CONFIG DE LA P츼GINA -----------------
st.set_page_config(page_title="An치lisis Financiero con Gemini", layout="wide")
st.title("游늵 An치lisis Financiero de Acciones + Gemini")

# ----------------- INPUT DEL USUARIO -----------------
symbol = st.text_input("游댟 Ingresa el s칤mbolo burs치til (por ejemplo: AAPL, MSFT, TSLA):")

if symbol:
    try:
        # ----------------- DATOS DE LA EMPRESA -----------------
        st.subheader("游끽 Descripci칩n de la Empresa")
        ticker = yf.Ticker(symbol)
        info = ticker.info

        sector = info.get("sector", "No disponible")
        descripcion = info.get("longBusinessSummary", "No se encontr칩 descripci칩n.")
        
        try:
            descripcion_traducida = GoogleTranslator(source='auto', target='es').translate(descripcion)
        except Exception as e:
            st.warning(f"No se pudo traducir la descripci칩n: {e}")
            descripcion_traducida = descripcion

        st.markdown(f"**Industria:** {sector}")
        st.markdown(descripcion_traducida)

        # ----------------- AN츼LISIS DE 칈NDICES -----------------
        st.subheader("游늳 An치lisis Financiero: 칈ndices Comparables")
        peers = ["SPY", "QQQ", "^DJI", symbol.upper()]
        precios_cierre = pd.DataFrame()

        for ticker in peers:
            try:
                data = yf.download(ticker, period="5y")
                if not data.empty:
                    if 'Adj Close' in data.columns:
                        precios_cierre[ticker] = data['Adj Close']
                    elif 'Close' in data.columns:
                        precios_cierre[ticker] = data['Close']
                    else:
                        st.warning(f"No se encontr칩 'Adj Close' ni 'Close' para {ticker}. Se omitir치.")
                else:
                    st.warning(f"No se encontraron datos para {ticker}. Se omitir치.")
            except Exception as e:
                st.warning(f"Error al descargar datos para {ticker}: {e}")

        if not precios_cierre.empty:
            precios_cierre = precios_cierre.dropna()
            
            if not precios_cierre.empty:
                rendimientos = np.log(precios_cierre / precios_cierre.shift(1))
                tasa_libre_riesgo = 0.02
                tasa_diaria = tasa_libre_riesgo / 252

                estadisticas = pd.DataFrame(index=precios_cierre.columns)
                estadisticas["M치ximo"] = precios_cierre.max()
                estadisticas["M칤nimo"] = precios_cierre.min()
                estadisticas["Desviaci칩n Est치ndar Anual"] = rendimientos.std() * np.sqrt(252)
                
                mean_rendimientos = rendimientos.mean()
                if not (mean_rendimientos == 0).any():
                    estadisticas["Coef. de Variaci칩n"] = estadisticas["Desviaci칩n Est치ndar Anual"] / mean_rendimientos
                else:
                    estadisticas["Coef. de Variaci칩n"] = np.nan
                    st.warning("Algunos rendimientos medios son cero, no se puede calcular el coeficiente de variaci칩n")

                st.markdown("Este c치lculo considera el precio al inicio y al final del periodo para determinar el rendimiento anualizado.")

                # ----------------- C츼LCULO DE RENDIMIENTOS ANUALIZADOS -----------------
                st.subheader("游늵 Rendimientos Anualizados")
                precios_anuales = precios_cierre.copy()
                a침os = [1, 3, 5]
                rendimiento_anual = {}

                for a침o in a침os:
                    dias = 252 * a침o
                    if len(precios_anuales) >= dias:
                        precios_final = precios_anuales.iloc[-1]
                        precios_inicio = precios_anuales.iloc[-dias]
                        rendimiento = ((precios_final / precios_inicio) ** (1 / a침o)) - 1
                        rendimiento_anual[f"{a침o} a침os"] = rendimiento
                    else:
                        st.warning(f"No hay suficientes datos para calcular el rendimiento de {a침o} a침o(s)")

                if rendimiento_anual:
                    tabla_rendimiento = pd.DataFrame(rendimiento_anual)
                    st.dataframe(tabla_rendimiento.style.format("{:.2%}"), use_container_width=True)
                else:
                    st.warning("No se pudo calcular ning칰n rendimiento anualizado por falta de datos")

                # -------------------游늳 GR츼FICO COMPARATIVO -------------------
                st.subheader("游늴 Evoluci칩n Hist칩rica Comparativa (5 a침os)")
                precios_normalizados = precios_cierre / precios_cierre.iloc[0] * 100

                fig = go.Figure()
                for ticker in precios_normalizados.columns:
                    fig.add_trace(go.Scatter(
                        x=precios_normalizados.index,
                        y=precios_normalizados[ticker],
                        mode='lines',
                        name=ticker
                    ))

                fig.update_layout(
                    title="Comparativa de Rendimiento (Base 100)",
                    xaxis_title="Fecha",
                    yaxis_title="칈ndice Normalizado",
                    template="plotly_dark"
                )

                st.plotly_chart(fig, use_container_width=True)

                # ----------------- AN츼LISIS FINANCIERO AVANZADO -----------------
                st.subheader("游늶 An치lisis Financiero Avanzado")
                instrucciones = """
Act칰a como un analista financiero de 칠lite, con experiencia en an치lisis t칠cnico y fundamental.
Utiliza los siguientes datos estad칤sticos de los 칤ndices SPY, QQQ y DJI para hacer un an치lisis detallado que incluya:
- 游늷 Resumen ejecutivo
- 游깴 Contexto macroecon칩mico
- 游늳 An치lisis t칠cnico
- 丘멆잺 Evaluaci칩n y gesti칩n de riesgos
- 游댩 Propuesta de escenarios

No hagas predicciones directas ni recomendaciones de inversi칩n, mant칠n la objetividad.
Datos a analizar:
"""
                prompt_analisis = instrucciones + str(estadisticas)
                try:
                    respuesta2 = modelo.generate_content(prompt_analisis)
                    st.info(respuesta2.text)
                except Exception as e:
                    st.error(f"Error al generar el an치lisis con Gemini: {e}")
            else:
                st.error("No hay suficientes datos v치lidos para continuar con el an치lisis")
        else:
            st.error("No se pudieron obtener datos de los 칤ndices comparables")

    except Exception as e:
        st.error(f"Ocurri칩 un error: {e}")